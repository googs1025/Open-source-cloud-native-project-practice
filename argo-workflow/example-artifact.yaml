#apiVersion: argoproj.io/v1alpha1
#kind: Workflow
#metadata:
#  generateName: artifact-passing-
#spec:
#  entrypoint: artifact-example
#  templates:
#    - name: artifact-example
#      # 流程不同的 pod
#      steps:
#        - - name: generate-artifact
#            template: test1
#        - - name: consume-artifact
#            template: test2
#            arguments:
#              # 输出文件
#              artifacts:
#                # bind message to the hello-art artifact
#                # generated by the generate-artifact step
#                # 需要绑定输出文件名 (hello-art) 与在工作流中被引用的 name
#                - name: message
#                  from: "{{steps.generate-artifact.outputs.artifacts.hello-art}}"
#
#    - name: test1
#      container:
#        image: alpine:3.12
#        command: [sh, -c]
#        args: ["echo hello world | tee /tmp/hello_world.txt"]
#      outputs:
#        artifacts:
#          # 输出文件名 hello-art, 目录 /tmp/hello_world.txt
#          # generate hello-art artifact from /tmp/hello_world.txt
#          # artifacts can be directories as well as files
#          - name: hello-art
#            path: /tmp/hello_world.txt
#
#    - name: test2
#      inputs:
#        # 传入文件
#        artifacts:
#          # unpack the message input artifact
#          # and put it at /tmp/message
#          - name: message
#            path: /tmp/message
#      container:
#        image: alpine:3.12
#        command: [sh, -c]
#        args: ["cat /tmp/message"]


apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: artifact-passing-
spec:
  entrypoint: artifact-example
  templates:
    - name: artifact-example
      steps:
        - - name: generate-artifact
            template: whalesay
        - - name: consume-artifact
            template: print-message
            arguments:
              artifacts:
                # bind message to the hello-art artifact
                # generated by the generate-artifact step
                - name: message
                  from: "{{steps.generate-artifact.outputs.artifacts.hello-art}}"

    - name: whalesay
      container:
        image: docker/whalesay:latest
        command: [sh, -c]
        args: ["cowsay hello world | tee /tmp/hello_world.txt"]
      outputs:
        artifacts:
          # generate hello-art artifact from /tmp/hello_world.txt
          # artifacts can be directories as well as files
          - name: hello-art
            path: /tmp/hello_world.txt

    - name: print-message
      inputs:
        artifacts:
          # unpack the message input artifact
          # and put it at /tmp/message
          - name: message
            path: /tmp/message
      container:
        image: alpine:latest
        command: [sh, -c]
        args: ["cat /tmp/message"]
